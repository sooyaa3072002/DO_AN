https://colab.research.google.com/drive/1XzuTxrUk-WXNcdXfjQ53oS_WlU3wgP_T?usp=sharing

!pip install pulp
import numpy as np
import pulp
import matplotlib.pyplot as plt

# TH√îNG S·ªê H·ªÜ TH·ªêNG
capacity_battery = 19.2  # kWh
max_charge_power = 9.6  # kW
max_discharge_power = 19.2  # kW
soc_min = 0.2 * capacity_battery
soc_max = 0.8 * capacity_battery
efficiency_charge = 0.9
efficiency_discharge = 0.85
initial_soc = 0.5 * capacity_battery

# GI√Å ƒêI·ªÜN THEO KHUNG GI·ªú
def get_buy_price_by_time(hour):
    if 22 <= hour or hour < 4:
        return 1830  # th·∫•p ƒëi·ªÉm
    elif (9.5 <= hour < 11.5) or (17 <= hour < 20):
        return 5174  # cao ƒëi·ªÉm
    else:
        return 3007  # b√¨nh th∆∞·ªùng

sell_price = 671  # VNƒê/kWh (Gi√° b√°n ƒëi·ªán m·∫∑t tr·ªùi)

# D·ªÆ LI·ªÜU C√îNG SU·∫§T
hours = np.arange(0, 24)
pv_power = np.array([0, 0, 0, 0, 0, 0, 0.66, 1.32, 2.42, 3.30, 3.96, 4.40, 4.62, 4.40, 3.96, 3.08, 1.98, 0.88, 0, 0, 0, 0, 0, 0])
load_power = np.array([0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 1.90, 2.15, 0.30, 0.30, 0.28, 3.13, 0.685, 0.68, 0.38, 0.38, 0.38, 1.52, 3.92, 3.92, 2.02, 2.02, 0.82, 0.67])

# KH·ªûI T·∫†O B√ÄI TO√ÅN MILP
model = pulp.LpProblem("Battery_Scheduling", pulp.LpMinimize)

# BI·∫æN QUY·∫æT ƒê·ªäNH
P_charge = pulp.LpVariable.dicts("P_charge", hours, 0, max_charge_power)
P_discharge = pulp.LpVariable.dicts("P_discharge", hours, 0, max_discharge_power)
P_grid_buy = pulp.LpVariable.dicts("P_grid_buy", hours, 0)
P_grid_sell = pulp.LpVariable.dicts("P_grid_sell", hours, 0)
SOC = pulp.LpVariable.dicts("SOC", hours, soc_min, soc_max)
x_charge = pulp.LpVariable.dicts("x_charge", hours, 0, 1, pulp.LpBinary)
x_discharge = pulp.LpVariable.dicts("x_discharge", hours, 0, 1, pulp.LpBinary)

# H√ÄM M·ª§C TI√äU
model += pulp.lpSum(P_grid_buy[t] * get_buy_price_by_time(t) for t in hours) - pulp.lpSum(P_grid_sell[t] * sell_price for t in hours)

# R√ÄNG BU·ªòC
for t in hours:
    if t > 0:
        model += SOC[t] == SOC[t-1] + P_charge[t] * efficiency_charge - P_discharge[t] * (1 / efficiency_discharge)
    else:
        model += SOC[t] == initial_soc + P_charge[t] * efficiency_charge - P_discharge[t] * (1 / efficiency_discharge)

    model += P_discharge[t] + P_grid_buy[t] - P_charge[t] - P_grid_sell[t] == load_power[t] - pv_power[t]
    model += x_charge[t] + x_discharge[t] <= 1
    model += P_charge[t] <= max_charge_power * x_charge[t]
    model += P_discharge[t] <= max_discharge_power * x_discharge[t]
    P_pv_to_charge = pulp.LpVariable(f"P_pv_to_charge_{t}", 0)
# GI·∫¢I B√ÄI TO√ÅN
model.solve()

# T√çNH TO√ÅN K·∫æT QU·∫¢
buy_energy, sell_energy, charge_energy, discharge_energy, battery_state = [], [], [], [], []
buy_cost_per_hour, sell_revenue_per_hour = [], []
buy_cost_total, sell_revenue_total = 0, 0

for t in hours:
    P_buy = P_grid_buy[t].varValue
    P_sell = P_grid_sell[t].varValue
    P_chg = P_charge[t].varValue * efficiency_charge
    P_dis = P_discharge[t].varValue * (1 / efficiency_discharge)
    SOC_t = SOC[t].varValue

    buy_energy.append(P_buy)
    sell_energy.append(P_sell)
    charge_energy.append(P_chg)
    discharge_energy.append(P_dis)
    battery_state.append(SOC_t)

    buy_cost = P_buy * get_buy_price_by_time(t)
    revenue = P_sell * sell_price

    buy_cost_per_hour.append(buy_cost)
    sell_revenue_per_hour.append(revenue)

buy_cost_total = sum(buy_cost_per_hour)
sell_revenue_total = sum(sell_revenue_per_hour)
net_cost = buy_cost_total - sell_revenue_total

# IN K·∫æT QU·∫¢
print("\nChi ti·∫øt l·∫≠p l·ªãch mua/b√°n v√† s·∫°c/x·∫£ ƒëi·ªán theo t·ª´ng gi·ªù:")
print("Gi·ªù | Mua (kWh) | Chi ph√≠ (VNƒê) | B√°n (kWh) | Doanh thu (VNƒê) | S·∫°c (kWh) | X·∫£ (kWh) | SOC (kWh)")
print("-" * 90)
for t in hours:
    print(f"{t:2}  | {buy_energy[t]:8.2f} | {buy_cost_per_hour[t]:12.0f} | {sell_energy[t]:8.2f} | {sell_revenue_per_hour[t]:12.0f} | {charge_energy[t]:8.2f} | {discharge_energy[t]:8.2f} | {battery_state[t]:8.2f}")

# T·ªîNG K·∫æT
print("\nüìå **T·ªïng k·∫øt:**")
print(f"üîπ T·ªïng ƒëi·ªán mua: {sum(buy_energy):.2f} kWh")
print(f"üîπ T·ªïng ƒëi·ªán b√°n: {sum(sell_energy):.2f} kWh")
print(f"üîπ Chi ph√≠ mua ƒëi·ªán: {buy_cost_total:.0f} VNƒê")
print(f"üîπ Thu nh·∫≠p t·ª´ b√°n ƒëi·ªán: {sell_revenue_total:.0f} VNƒê")
print(f"üîπ T·ªïng chi ph√≠ th·ª±c t·∫ø: {net_cost:.0f} VNƒê")

# V·∫º BI·ªÇU ƒê·ªí
plt.figure(figsize=(10, 6))
plt.plot(hours, pv_power, 'b-o', label="C√¥ng su·∫•t PV (kW)")
plt.plot(hours, load_power, 'orange', marker='o', linestyle='-', label="Ph·ª• t·∫£i (kW)")
plt.plot(hours, buy_energy, 'g-o', label="Mua t·ª´ l∆∞·ªõi (kW)")
plt.plot(hours, sell_energy, 'r-o', label="B√°n l√™n l∆∞·ªõi (kW)")
plt.xlabel("Gi·ªù trong ng√†y")
plt.ylabel("C√¥ng su·∫•t (kW)")
plt.title("C√¥ng su·∫•t PV, Ph·ª• t·∫£i, Mua/B√°n theo gi·ªù")
plt.xticks(hours)
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(hours, battery_state, 'purple', marker='o', linestyle='-', label="SOC c·ªßa pin (kWh)")
plt.xlabel("Gi·ªù trong ng√†y")
plt.ylabel("Dung l∆∞·ª£ng pin (kWh)")
plt.title("Tr·∫°ng th√°i SOC c·ªßa pin theo th·ªùi gian")
plt.xticks(hours)
plt.legend()
plt.grid()
plt.show()

cumulative_buy_cost = np.cumsum(buy_cost_per_hour)
cumulative_sell_revenue = np.cumsum(sell_revenue_per_hour)
plt.figure(figsize=(10, 6))
plt.plot(hours, cumulative_buy_cost, 'g-o', label="Chi ph√≠ mua t√≠ch l≈©y (VNƒê)")
plt.plot(hours, cumulative_sell_revenue, 'r-o', label="Doanh thu b√°n t√≠ch l≈©y (VNƒê)")
plt.xlabel("Gi·ªù trong ng√†y")
plt.ylabel("VNƒê")
plt.title("Chi ph√≠ mua v√† doanh thu b√°n ƒëi·ªán t√≠ch l≈©y")
plt.xticks(hours)
plt.legend()
plt.grid()
plt.show()
# In ra c√¥ng su·∫•t s·∫°c (P_charge) theo t·ª´ng gi·ªù
print("\nC√¥ng su·∫•t s·∫°c (P_charge) theo t·ª´ng gi·ªù:")
print("-" * 40)
for t in hours:
    print(f"Gi·ªù {t:2}: P_charge = {P_charge[t].varValue:.2f} kW")

# V·∫Ω bi·ªÉu ƒë·ªì c√¥ng su·∫•t s·∫°c theo gi·ªù
plt.figure(figsize=(10, 6))
plt.plot(hours, [P_charge[t].varValue for t in hours], 'b-o', label="C√¥ng su·∫•t s·∫°c (kW)")
plt.xlabel("Gi·ªù trong ng√†y")
plt.ylabel("C√¥ng su·∫•t (kW)")
plt.title("C√¥ng su·∫•t S·∫°c theo gi·ªù trong ng√†y")
plt.xticks(hours)
plt.legend()
plt.grid()
plt.show()
