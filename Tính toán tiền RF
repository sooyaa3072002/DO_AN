https://colab.research.google.com/drive/1NO-TvaQ3bmUOKG9d06EN8XfASTnZqcqf?usp=sharing

# ============================ #
#    1. Import th∆∞ vi·ªán c·∫ßn thi·∫øt
# ============================ #
!pip install pulp

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from google.colab import files

# ============================ #
#    2. T·∫£i & ƒë·ªçc d·ªØ li·ªáu g·ªëc ƒë·ªÉ hu·∫•n luy·ªán
# ============================ #
print("üìÇ Vui l√≤ng t·∫£i l√™n t·ªáp CSV d·ªØ li·ªáu hu·∫•n luy·ªán...")
uploaded = files.upload()
file_name = list(uploaded.keys())[0]
df = pd.read_csv(f"/content/{file_name}")

# ============================ #
#    3. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
# ============================ #
df["pvAvg12h"] = df["PV_Power_kW"].rolling(window=12, min_periods=1).mean().shift(1)
df["priceAvg12h"] = df["Gia_mua_dien"].rolling(window=12, min_periods=1).mean().shift(1)
df["loadAvg12h"] = df["Load_Power_kW"].rolling(window=12, min_periods=1).mean().shift(1)
df.fillna(0, inplace=True)

# ============================ #
#    4. Chu·∫©n b·ªã t·∫≠p hu·∫•n luy·ªán
# ============================ #
feature_cols = [
    "PV_Power_kW", "Load_Power_kW", "SOC_kWh", "Gia_mua_dien",
    "Gia_ban_dien", "pvAvg12h", "priceAvg12h", "loadAvg12h"
]
X = df[feature_cols]
y = df["action"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ============================ #
#    5. Hu·∫•n luy·ªán m√¥ h√¨nh
# ============================ #
model = RandomForestClassifier(n_estimators=100, max_depth=10, class_weight='balanced', random_state=42)
model.fit(X_train, y_train)

# ============================ #
#    6. ƒê√°nh gi√° m√¥ h√¨nh
# ============================ #
y_pred = model.predict(X_test)
print("\nüéØ ƒê·ªô ch√≠nh x√°c:", accuracy_score(y_test, y_pred))
print("\nüß† B√°o c√°o ph√¢n lo·∫°i:\n", classification_report(y_test, y_pred))

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues",
            xticklabels=["Idle", "Charge", "Discharge"],
            yticklabels=["Idle", "Charge", "Discharge"])
plt.title("üîç Ma Tr·∫≠n Nh·∫ßm L·∫´n")
plt.xlabel("D·ª± ƒëo√°n")
plt.ylabel("Th·ª±c t·∫ø")
plt.show()

# =========================== #
# 7. T·∫°o d·ªØ li·ªáu m√¥ ph·ªèng 24h v√† d·ª± ƒëo√°n
# =========================== #
hours = np.arange(24)

pv = np.array([0, 0, 0, 0, 0, 0, 0.66, 1.32, 2.42, 3.30, 3.96, 4.40, 4.62, 4.40, 3.96, 3.08, 1.98, 0.88, 0, 0, 0, 0, 0, 0])
load = np.array([0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 1.90, 2.15, 0.30, 0.30, 0.28, 3.13, 0.685, 0.68, 0.38, 0.38, 0.38, 1.52, 3.92, 3.92, 2.02, 2.02, 0.82, 0.67])

def get_price(h):
    if 22 <= h or h < 4:
        return 1830
    elif (9.5 <= h < 11.5) or (17 <= h < 20):
        return 5174
    else:
        return 3007

df_24h = pd.DataFrame({
    "hour": hours,
    "PV_Power_kW": pv,
    "Load_Power_kW": load,
    "Gia_mua_dien": [get_price(h) for h in hours],
    "Gia_ban_dien": [671]*24
})

df_24h["pvAvg12h"] = df_24h["PV_Power_kW"].rolling(12, 1).mean()
df_24h["priceAvg12h"] = df_24h["Gia_mua_dien"].rolling(12, 1).mean()
df_24h["loadAvg12h"] = df_24h["Load_Power_kW"].rolling(12, 1).mean()
df_24h["SOC_kWh"] = 9.6
df_24h.fillna(0, inplace=True)

# =========================== #
# 8. D·ª± ƒëo√°n h√†nh ƒë·ªông
# =========================== #
action_preds = model.predict(df_24h[feature_cols])
df_24h["action_pred"] = action_preds

# =========================== #
# 9. Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
# =========================== #
print("\nüìä D·ª± ƒëo√°n h√†nh ƒë·ªông theo gi·ªù:")
for t in hours:
    action = df_24h.loc[t, "action_pred"]
    action_str = ["Idle", "Charge", "Discharge"][action]
    print(f"Gi·ªù {t:02d}: {action_str}")
# =========================== #
# 10. T√≠nh to√°n c√¥ng su·∫•t, SOC, chi ph√≠/l·ª£i nhu·∫≠n theo h√†nh ƒë·ªông d·ª± ƒëo√°n
# =========================== #
SOC = 9.6
SOC_min, SOC_max = 3.84, 15.36
eta_charge = 0.9
eta_discharge = 0.85
P_charge_max = 9.6
P_discharge_max = 19.2

p_charge = []
p_discharge = []
p_grid_buy = []
p_grid_sell = []
soc_list = [SOC]  # SOC[0]

for i in range(24):
    action = df_24h.loc[i, "action_pred"]
    pv = df_24h.loc[i, "PV_Power_kW"]
    load = df_24h.loc[i, "Load_Power_kW"]
    surplus=pv-load
    a=-surplus
    charge_amount = min(P_charge_max, SOC_max - SOC, surplus * eta_charge)
    discharge_amount = min(P_discharge_max, SOC - SOC_min, a / eta_discharge)

    if action == 1:  # Charge
        p_charge.append(charge_amount)
        p_discharge.append(0)
        SOC += charge_amount   # Chuy·ªÉn v·ªÅ nƒÉng l∆∞·ª£ng l∆∞u tr·ªØ
    elif action == 2:  # Discharge
        p_charge.append(0)
        p_discharge.append(discharge_amount)
        SOC -= discharge_amount   # Tr·ª´ ƒëi l∆∞·ª£ng x·∫£ th·ª±c t·∫ø
    else:  # Idle
        p_charge.append(0)
        p_discharge.append(0)

    # C√¢n b·∫±ng c√¥ng su·∫•t
    p_grid = pv + p_discharge[-1] - load - p_charge[-1]
    if p_grid >= 0:
        p_grid_sell.append(p_grid)
        p_grid_buy.append(0)
    else:
        p_grid_buy.append(-p_grid)
        p_grid_sell.append(0)

    # C·∫≠p nh·∫≠t SOC
    SOC = max(min(SOC, SOC_max), SOC_min)
    soc_list.append(SOC)

# Ghi l·∫°i k·∫øt qu·∫£
df_24h["P_charge"] = p_charge
df_24h["P_discharge"] = p_discharge
df_24h["P_grid_buy"] = p_grid_buy
df_24h["P_grid_sell"] = p_grid_sell
df_24h["SOC"] = soc_list[1:]

df_24h["Chi_phi_mua"] = df_24h["P_grid_buy"] * df_24h["Gia_mua_dien"]
df_24h["Thu_nhap_ban"] = df_24h["P_grid_sell"] * df_24h["Gia_ban_dien"]
df_24h["Chi_phi_thuc"] = df_24h["Chi_phi_mua"] - df_24h["Thu_nhap_ban"]

# =========================== #
# 11. Hi·ªÉn th·ªã k·∫øt qu·∫£
# =========================== #
print("\nüîã K·∫æT QU·∫¢ D·ª∞A TR√äN D·ª∞ ƒêO√ÅN & C√îNG TH·ª®C ƒê∆†N GI·∫¢N\n")
for t in range(24):
    print(f"Gi·ªù {t:02d}: "
          f"S·∫°c = {df_24h.loc[t, 'P_charge']:.2f} kW | "
          f"X·∫£ = {df_24h.loc[t, 'P_discharge']:.2f} kW | "
          f"Mua = {df_24h.loc[t, 'P_grid_buy']:.2f} kW | "
          f"B√°n = {df_24h.loc[t, 'P_grid_sell']:.2f} kW | "
          f"SOC = {df_24h.loc[t, 'SOC']:.2f} kWh")

total_buy = df_24h["Chi_phi_mua"].sum()
total_sell = df_24h["Thu_nhap_ban"].sum()

print(f"\nüí∞ T·ªïng chi ph√≠ mua ƒëi·ªán: {total_buy:,.0f} VNƒê")
print(f"üí∏ T·ªïng doanh thu b√°n ƒëi·ªán: {total_sell:,.0f} VNƒê")
print(f"üìâ Chi ph√≠ th·ª±c t·∫ø: {total_buy - total_sell:,.0f} VNƒê")

# =========================== #
# 12. V·∫Ω bi·ªÉu ƒë·ªì nh∆∞ c≈©
# =========================== #
plt.figure(figsize=(12, 6))
plt.plot(df_24h["hour"], df_24h["P_charge"], label="S·∫°c", marker='o')
plt.plot(df_24h["hour"], df_24h["P_discharge"], label="X·∫£", marker='s')
plt.plot(df_24h["hour"], df_24h["P_grid_buy"], label="Mua t·ª´ l∆∞·ªõi", marker='^')
plt.plot(df_24h["hour"], df_24h["P_grid_sell"], label="B√°n l√™n l∆∞·ªõi", marker='v')
plt.title("üîå C√¥ng su·∫•t theo t·ª´ng gi·ªù")
plt.xlabel("Gi·ªù")
plt.ylabel("kW")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# SOC
plt.figure(figsize=(10, 4))
plt.plot(df_24h["hour"], df_24h["SOC"], label="SOC (kWh)", color="orange", marker='o')
plt.title("üîã Tr·∫°ng th√°i pin (SOC) theo gi·ªù")
plt.xlabel("Gi·ªù")
plt.ylabel("kWh")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Chi ph√≠ mua & b√°n ƒëi·ªán
plt.figure(figsize=(10, 4))
plt.plot(df_24h["hour"], df_24h["Chi_phi_mua"], label="Chi ph√≠ mua ƒëi·ªán", color="blue", marker='o')
plt.plot(df_24h["hour"], df_24h["Thu_nhap_ban"], label="Thu nh·∫≠p b√°n ƒëi·ªán", color="green", marker='s')
plt.title("üí∞ Chi ph√≠ mua & Doanh thu b√°n ƒëi·ªán theo gi·ªù")
plt.xlabel("Gi·ªù")
plt.ylabel("VNƒê")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
